package edu.cw.cbr.model.domain;

// Generated 27.04.2013 1:42:58 by Hibernate Tools 4.0.0

import java.util.ArrayList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

/**
 * Task generated by hbm2java
 */
@Entity
@Table(name = "task", schema = "public")
public class Task extends ArrayAble{

	private int taskId;
	private float computationalComplexity;
	private float amountOfMemory;
	private float downloadingAmountOfData;
	private float uploadingAmountOfData;
	private float maxRunningTime;

	public Task() {
	}

	/**
	 * Creates new instance of  {@code Task}.
	 *
	 * @param complex - computational complexity of application.
	 * @param memoryNeed - memory requirements.
	 * @param dataToDown - amount of downloading data.
	 * @param dataToUp - amount of uploading data.
	 * @param timeReq - running time requirements.
	 * @throws IllegalArgumentException if complex or memoryNeed, or dataToDown,
	 * or dataToUp, or timeReq is less than zero.
	 */
	public Task (float complex, float memoryNeed,
			float dataToDown, float dataToUp, float timeReq)
					throws IllegalArgumentException{
		if(complex < 0 || memoryNeed < 0 || dataToDown < 0 || dataToUp < 0
				|| timeReq < 0)
			throw new IllegalArgumentException();
		this.setComputationalComplexity(complex);
		this.setAmountOfMemory(memoryNeed);
		this.setDownloadingAmountOfData(dataToDown);
		this.setUploadingAmountOfData(dataToUp);
		this.setMaxRunningTime(timeReq);
	}
	public Task(int taskId, float computationalComplexity,
			float amountOfMemory, float downloadingAmountOfData,
			float uploadingAmountOfData, float maxRunningTime) {
		this.taskId = taskId;
		this.computationalComplexity = computationalComplexity;
		this.amountOfMemory = amountOfMemory;
		this.downloadingAmountOfData = downloadingAmountOfData;
		this.uploadingAmountOfData = uploadingAmountOfData;
		this.maxRunningTime = maxRunningTime;
	}

	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	@Column(name = "task_id", unique = true, nullable = false)
	public int getTaskId() {
		return this.taskId;
	}

	public void setTaskId(int taskId) {
		this.taskId = taskId;
	}

	@Column(name = "computational_complexity", nullable = false, precision = 8, scale = 8)
	public float getComputationalComplexity() {
		return this.computationalComplexity;
	}

	public void setComputationalComplexity(float computationalComplexity) {
		this.computationalComplexity = computationalComplexity;
	}

	@Column(name = "amount_of_memory", nullable = false, precision = 8, scale = 8)
	public float getAmountOfMemory() {
		return this.amountOfMemory;
	}

	public void setAmountOfMemory(float amountOfMemory) {
		this.amountOfMemory = amountOfMemory;
	}

	@Column(name = "downloading_amount_of_data", nullable = false, precision = 8, scale = 8)
	public float getDownloadingAmountOfData() {
		return this.downloadingAmountOfData;
	}

	public void setDownloadingAmountOfData(float downloadingAmountOfData) {
		this.downloadingAmountOfData = downloadingAmountOfData;
	}

	@Column(name = "uploading_amount_of_data", nullable = false, precision = 8, scale = 8)
	public float getUploadingAmountOfData() {
		return this.uploadingAmountOfData;
	}

	public void setUploadingAmountOfData(float uploadingAmountOfData) {
		this.uploadingAmountOfData = uploadingAmountOfData;
	}

	@Column(name = "max_running_time", nullable = false, precision = 8, scale = 8)
	public float getMaxRunningTime() {
		return this.maxRunningTime;
	}

	public void setMaxRunningTime(float maxRunningTime) {
		this.maxRunningTime = maxRunningTime;
	}

	@Override
	public List<Object> toList() {
		List<Object> instLData = new ArrayList<Object>();
		instLData.add(this.getTaskId());
		instLData.add(this.getComputationalComplexity());
		instLData.add(this.getAmountOfMemory());
		instLData.add(this.getDownloadingAmountOfData());
		instLData.add(this.getUploadingAmountOfData());
		instLData.add(this.getMaxRunningTime());
		return instLData;
	}

}
