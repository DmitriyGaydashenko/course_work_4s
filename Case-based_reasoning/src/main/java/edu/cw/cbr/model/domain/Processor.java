package edu.cw.cbr.model.domain;

// Generated 27.04.2013 1:42:58 by Hibernate Tools 4.0.0

import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;

/**
 * Processor generated by hbm2java
 */
@Entity
@Table(name = "processor", schema = "public")
public class Processor extends HardwareComponent{

	public final static int HARDWARE_TYPE = 2;
	private int coresNum;
	private float cacheSize;
	private float clockSpeed;
	
	public Processor() {
		
	}
	/**
	 * Returns new instance of  {@code Processor}.
	 *
	 * @param hcFamilyId the hardware component family's id.
	 * @param hcName the hardware component's name.
	 * @param coresNum - number of cores in processor.
	 * @param clockSpeed -  frequency at which a CPU is running(GHz).
	 * @param cacheSize - CPU cache(MB).
	 * @throws IllegalArgumentException if coresNum is less or equal to zero or
	 * clockSpeed, or cacheSize is less than zero.
	 */
	public Processor(int hcFamilyId, String hcName,
			int coresNum, float clockSpeed, float cacheSize)
					throws IllegalArgumentException {
						super(hcFamilyId, hcName);
		if(coresNum <= 0 || clockSpeed < 0 || cacheSize < 0)
			throw new IllegalArgumentException();
		this.setCoresNum(coresNum);
		this.setClockSpeed(clockSpeed);
		this.setCacheSize(cacheSize);
	}
	
	@Column(name = "cores_num", nullable = false)
	public int getCoresNum() {
		return this.coresNum;
	}

	public void setCoresNum(int coresNum) {
		this.coresNum = coresNum;
	}

	@Column(name = "cache_size", nullable = false, precision = 8, scale = 8)
	public float getCacheSize() {
		return this.cacheSize;
	}

	public void setCacheSize(float cacheSize) {
		this.cacheSize = cacheSize;
	}

	@Column(name = "clock_speed", nullable = false, precision = 8, scale = 8)
	public float getClockSpeed() {
		return this.clockSpeed;
	}

	public void setClockSpeed(float clockSpeed) {
		this.clockSpeed = clockSpeed;
	}
	
	@Override
	public List<Object> toList() {
		List<Object> instDataList = super.toList();
		instDataList.add(this.getCoresNum());
		instDataList.add(this.getClockSpeed());
		instDataList.add(this.getCacheSize());
		return instDataList;
	}

}
