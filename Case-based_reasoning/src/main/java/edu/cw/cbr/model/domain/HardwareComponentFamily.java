package edu.cw.cbr.model.domain;

// Generated 27.04.2013 1:42:58 by Hibernate Tools 4.0.0

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import edu.cw.cbr.model.DeveloperUtil;
import edu.cw.cbr.model.HardwareComponentTypeUtil;

/**
 * HardwareComponentFamily generated by hbm2java
 */
@Entity
@Table(name = "hardwarecomponentfamily", schema = "public")
public class HardwareComponentFamily extends ArrayAble{

	private int hardwareComponentFamilyId;
	private Developer developer;
	private HardwareComponentType hardwareComponentType;
	private String hardwareComponentFamilyName;
	@OneToMany(cascade=CascadeType.ALL)
    @JoinColumn(name="EMPLOYEE_ID")
    private Set<Developer> accounts;

	public HardwareComponentFamily() {
	}

	public HardwareComponentFamily(int developerId, int hctId, String hcfName)
			throws IllegalArgumentException{
		if (hcfName.isEmpty())
			throw new IllegalArgumentException();
		try {
			DeveloperUtil devUtil = new DeveloperUtil();
			this.developer = devUtil.getEntity(developerId);
			if (developer == null)
				throw new IllegalArgumentException();
			HardwareComponentTypeUtil hctU = new HardwareComponentTypeUtil();
			this.hardwareComponentType = hctU.getEntity(hctId);
			if(this.hardwareComponentType == null)
				throw new IllegalArgumentException();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new IllegalArgumentException();
		}
		this.hardwareComponentFamilyName = hcfName;
	}

	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	@Column(name = "hardware_component_family_id", unique = true, nullable = false)
	public int getHardwareComponentFamilyId() {
		return this.hardwareComponentFamilyId;
	}

	public void setHardwareComponentFamilyId(int hardwareComponentFamilyId) {
		this.hardwareComponentFamilyId = hardwareComponentFamilyId;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "developer_id", nullable = false)
	public Developer getDeveloper() {
		return this.developer;
	}

	public void setDeveloper(Developer developer) {
		this.developer = developer;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "hardware_component_type_id", nullable = false)
	public HardwareComponentType getHardwareComponentType() {
		return this.hardwareComponentType;
	}

	public void setHardwareComponentType(
			HardwareComponentType hardwareComponentType) {
		this.hardwareComponentType = hardwareComponentType;
	}

	@Column(name = "hardware_component_family_name", nullable = false, length = 256)
	public String getHardwareComponentFamilyName() {
		return this.hardwareComponentFamilyName;
	}

	public void setHardwareComponentFamilyName(
			String hardwareComponentFamilyName) {
		this.hardwareComponentFamilyName = hardwareComponentFamilyName;
	}

	@Override
	public List<Object> toList() {
		List<Object> instDataList = new ArrayList<Object>();
		instDataList.add(this.getHardwareComponentFamilyId());
		instDataList.add(this.getDeveloper().getDeveloperName());
		instDataList.add(this.getHardwareComponentType()
				.getHardwareComponentTypeName());
		instDataList.add(this.getHardwareComponentFamilyName());
		return instDataList;
	}
}
