package edu.cw.cbr.model.domain;

// Generated 27.04.2013 1:42:58 by Hibernate Tools 4.0.0

import java.sql.SQLException;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import edu.cw.cbr.controller.security.SecurityUtil;
import edu.cw.cbr.model.UsertypeUtil;

/**
 * Sysuser generated by hbm2java
 */
@Entity
@Table(name = "sysuser", schema = "public", uniqueConstraints = @UniqueConstraint(columnNames = "email"))
public class Sysuser extends Arrayable{
	
	/**
	 * Enumeration of user's states.
	 */
	public static enum UserState {
		/**
		 * User does not exist.
		 */
		NOT_EXISTS,
		/**
		 * User had not been verified yet.
		 */
		NOT_VERIFIED,
		/**
		 * User is valid.
		 */
		IS_VALID};
	
	private int userId;
	private Usertype usertype;
	private String email;
	private String password;
	private String FName;
	private String LName;
	private boolean isVerified;

	public Sysuser() {
	}

	private Sysuser(String fName, String lName,
			String email, String password, int usertypeId) 
					throws IllegalArgumentException {
		this.setFName(fName);
		this.setLName(lName);
		this.setEmail(email);
		this.setPassword(SecurityUtil.hashInput(password));
		UsertypeUtil typeUtil = new UsertypeUtil();
		try {
			this.setUsertype(typeUtil.getEntity(usertypeId));
		} catch (SQLException e) {
			e.printStackTrace();
			throw new IllegalArgumentException();
		}
	}
	
	public static Sysuser unsafeSysuserFactory(String fName, String lName,
			String email, String password, int usertypeId) {
		return new Sysuser(fName, lName, email, password, usertypeId);		
	}
	
	public static Sysuser safeSysuserFactory(String fName, String lName,
			String email, String password, int usertypeId) {
		if (!Sysuser.isValidParams(fName, lName, email, password, usertypeId))
			throw new IllegalArgumentException();
		return new Sysuser(fName, lName, email, password, usertypeId);
	}

	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	@Column(name = "user_id", unique = true, nullable = false)
	public int getUserId() {
		return this.userId;
	}

	public void setUserId(int userId) {
		this.userId = userId;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "user_type_id", nullable = false)
	public Usertype getUsertype() {
		return this.usertype;
	}

	public void setUsertype(Usertype usertype) {
		this.usertype = usertype;
	}

	@Column(name = "email", unique = true, nullable = false, length = 256)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "password", nullable = false, length = 256)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "f_name", nullable = false, length = 256)
	public String getFName() {
		return this.FName;
	}

	public void setFName(String FName) {
		this.FName = FName;
	}

	@Column(name = "l_name", nullable = false, length = 256)
	public String getLName() {
		return this.LName;
	}

	public void setLName(String LName) {
		this.LName = LName;
	}
	
	@Column(name = "is_verified", nullable = false)
	public boolean isVerified() {
		return isVerified;
	}

	public void setVerified(boolean isVerified) {
		this.isVerified = isVerified;
	}
	
	/**
	 * Returns state of user.
	 * @param user - instance of SysUser, which state will be returned.
	 * @return user's state.
	 */
	public static UserState getUserState(Sysuser user) {
		if (user == null)
			return UserState.NOT_EXISTS;
		if (!user.isVerified())
			return UserState.NOT_VERIFIED;
		return UserState.IS_VALID; 
	}

	@Override
	protected List<Object> toList() {
		// TODO Auto-generated method stub
		return null;
	}
	
	public static boolean isValidParams(String fName, String lName,
			String email, String password, int usertypeId) {
		boolean valid = !(fName.isEmpty() || lName.isEmpty() || email.isEmpty() ||
				password.isEmpty());
		UsertypeUtil typeUtil = new UsertypeUtil();
		return valid && typeUtil.exist(usertypeId);
	}

}
